CREATE USER c##bookstore IDENTIFIED BY bookstore;
GRANT CONNECT, RESOURCE, DBA TO c##bookstore;
GRANT CREATE SESSION TO c##bookstore;
GRANT UNLIMITED TABLESPACE TO c##bookstore;

CREATE TABLE Users
(
	user_Id NUMBER GENERATED BY DEFAULT AS IDENTITY ,
	FIRST_NAME VARCHAR2(100) NOT NULL,
	LAST_NAME VARCHAR2(100) NOT NULL,
	EMAIL_ID VARCHAR2(150)  NOT NULL,
	PASSWORD VARCHAR2(32) NOT NULL,
	PICTURE VARCHAR2(1000) DEFAULT ON NULL '/images/no_user_image.jpg',
	DOB DATE,
	PHONE VARCHAR2(11),
	BKASH VARCHAR2(11),
	ROCKET VARCHAR2(11),
	PAYPAL VARCHAR2(50),
	PRIMARY KEY (User_ID)
);

CREATE TABLE Service
(
	service_ID NUMBER GENERATED BY DEFAULT AS IDENTITY,
	price NUMBER(10,2) NOT NULL,
	PICTURE VARCHAR2(1000) DEFAULT ON NULL '/images/no_service_image.jpg',
	DESCRIPTION VARCHAR2(1000),
	TITLE VARCHAR2(30) NOT NULL,
	RATING_COUNT NUMBER,
	TOTAL_RATING NUMBER,
	PRIMARY KEY (service_id)
);

CREATE TABLE Tag
(
	tag_id NUMBER GENERATED BY DEFAULT AS IDENTITY,
	type VARCHAR2(70) NOT NULL,
	name VARCHAR2(100) NOT NULL,
	PRIMARY KEY (tag_id)
);

CREATE TABLE Employer
(
	employer_ID NUMBER NOT NULL,
	RATING_COUNT NUMBER,
	TOTAL_RATING NUMBER,
	PRIMARY KEY (employer_ID),
	FOREIGN KEY (employer_ID) REFERENCES Users(User_ID)
);

CREATE TABLE Freelancer
(
	freelancer_ID NUMBER NOT NULL,
	BIO VARCHAR2(1000),
	RATING_COUNT NUMBER,
	TOTAL_RATING NUMBER,
	PRIMARY KEY (freelancer_ID),
	FOREIGN KEY (freelancer_ID) REFERENCES Users(User_ID)
);

CREATE TABLE Job
(
	job_id NUMBER GENERATED BY DEFAULT AS IDENTITY,
	title VARCHAR2(100) NOT NULL,
	description VARCHAR2(1000),
	price_point NUMBER(10,2) NOT NULL,
	time_given VARCHAR2(30),
	end_time TIMESTAMP WITH TIME ZONE,
	employer_Id NUMBER NOT NULL,
	freelancer_ID NUMBER,
	PRIMARY KEY(job_id),
	FOREIGN KEY (freelancer_ID) REFERENCES Freelancer(freelancer_ID),
	FOREIGN KEY (employer_ID) REFERENCES Employer(employer_ID)
);

CREATE TABLE Employs
(
	employerRating NUMBER NOT NULL,
	freelancerRating NUMBER NOT NULL,
	employer_ID NUMBER NOT NULL,
	freelancer_ID NUMBER NOT NULL,
	PRIMARY KEY (employer_ID, freelancer_ID),
	FOREIGN KEY (freelancer_ID) REFERENCES Freelancer(freelancer_ID),
	FOREIGN KEY (employer_ID) REFERENCES Employer(employer_ID)
);

CREATE TABLE Has
(
	service_id NUMBER NOT NULL,
	tag_id NUMBER NOT NULL,
	PRIMARY KEY (service_ID, tag_id),
	FOREIGN KEY (service_ID) REFERENCES Service(service_ID),
	FOREIGN KEY (tag_id) REFERENCES Tag(tag_id)
);

CREATE TABLE Skills_needed
(
	job_id NUMBER NOT NULL,
	tag_id NUMBER NOT NULL,
	PRIMARY KEY (job_ID, tag_id),
	FOREIGN KEY (job_ID) REFERENCES Job(job_ID),
	FOREIGN KEY (tag_id) REFERENCES Tag(tag_id)
);

CREATE TABLE Buys
(
	transaction_ID NUMBER GENERATED BY DEFAULT AS IDENTITY,
	rating NUMBER NOT NULL,
	employer_Id NUMBER NOT NULL,
	service_ID NUMBER NOT NULL,
	time_of_purchase TIMESTAMP WITH TIME ZONE,
	PRIMARY KEY (transaction_ID),
	FOREIGN KEY (employer_ID) REFERENCES Employer(employer_ID),
	FOREIGN KEY (service_ID) REFERENCES Service(service_ID)
);

CREATE TABLE Prefers
(
	priority NUMBER,
	employer_ID NUMBER NOT NULL,
	tag_id NUMBER NOT NULL,
	PRIMARY KEY (employer_ID, tag_id),
	FOREIGN KEY (employer_ID) REFERENCES Employer(employer_ID),
	FOREIGN KEY (tag_id) REFERENCES Tag(tag_id)
);

CREATE TABLE chat_data
(
	message_id NUMBER GENERATED ALWAYS AS IDENTITY,
	time TIMESTAMP WITH TIME ZONE NOT NULL,
	data VARCHAR2(1000) NOT NULL,
	employer_Id NUMBER NOT NULL,
	freelancer_Id NUMBER NOT NULL,
	PRIMARY KEY (message_id),
	FOREIGN KEY (employer_ID) REFERENCES Employer(employer_ID),
	FOREIGN KEY (freelancer_ID) REFERENCES Freelancer(freelancer_ID)
);


---procedures
CREATE OR REPLACE PROCEDURE increment_preference(EID IN NUMBER, TID IN NUMBER)IS
	i NUMBER;
BEGIN
	UPDATE Prefers
	SET priority=priority+1
	WHERE employer_ID=EID AND tag_id=TID;
	i:=SQL%ROWCOUNT;
	if i=0 THEN
		INSERT INTO Prefers(employer_ID, tag_id, priority)
		VALUES (EID, TID, 1);
	END IF;
END;
/
CREATE OR REPLACE PROCEDURE increment_preference(EID IN NUMBER, TID IN NUMBER)IS
	i NUMBER;
BEGIN
	UPDATE Prefers
	SET priority=priority+1
	WHERE employer_ID=EID AND tag_id=TID;
	i:=SQL%ROWCOUNT;
	if i=0 THEN
		INSERT INTO Prefers(employer_ID, tag_id, priority)
		VALUES (EID, TID, 1);
	END IF;
END;
/ 

INSERT INTO USERS(FIRST_NAME, LAST_NAME, EMAIL_ID, PASSWORD)
VALUES('Wasif', 'Hamid', 'wsf.hmd99@gmail.com', '$2b$08$lELoDBzFRHLAD8L6YMaMBe/DCf6F6wazgZ.eYe60h5itrRmVz9DF2');

INSERT INTO USERS(FIRST_NAME, LAST_NAME, EMAIL_ID, PASSWORD)
VALUES('Sakib', 'Sami', 'sami@gmail.com', '$2b$08$v.s/hcxrQt8Y/Emsf99Uou0JWDqqs/Pncp2v.mSTElFxqE8QEZSya');





